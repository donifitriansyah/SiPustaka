/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package Menu;

import PilihData.DataAnggota;
import PilihData.DataBuku;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Doni Fitriansyah
 */
public class PeminjamanBuku extends javax.swing.JDialog {

    private List<String[]> temporaryData = new ArrayList<>();
    boolean dataDitemukan;
    DefaultTableModel model1, model2, model3;
    Connection koneksi;
    Statement perintah;
    ResultSet rs;
    DataBuku dialogBuku;
    DataAnggota dialogAnggota;

    private String kodeUser;

    /**
     * Creates new form KelolaDatabuku
     */
    public PeminjamanBuku(java.awt.Frame parent, boolean modal, String kodeUser) {
        super(parent, modal);
        initComponents();
        model1 = (DefaultTableModel) tblSementara.getModel();
        model2 = (DefaultTableModel) tblPeminjaman.getModel();
        model3 = (DefaultTableModel) tblDetail.getModel();
        dataDitemukan = false;
        this.kodeUser = kodeUser;
        dialogBuku = new DataBuku(this, true);
        dialogAnggota = new DataAnggota(this, true);
        btnTambahBuku.setVisible(false);

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = "jdbc:mysql://localhost/sipustaka";
            String user = "root";
            String password = "";
            koneksi = DriverManager.getConnection(url, user, password);
            perintah = koneksi.createStatement();
        } catch (ClassNotFoundException e) {
            System.err.println("JDBC Driver tidak ditemukan");
        } catch (SQLException e) {
            System.err.println("Gagal koneksi atau menciptakan objek statement");
        }
        tampilDataPeminjaman();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooser1 = new com.raven.datechooser.DateChooser();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblDetail = new javax.swing.JTable();
        panelSementara = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSementara = new javax.swing.JTable();
        btnUbah = new javax.swing.JButton();
        btnSimpan = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        labelTotalPinjam = new javax.swing.JLabel();
        btnBatalSementara = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnPinjam = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnReset = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        btnBaru = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtKodeBuku = new javax.swing.JTextField();
        txtJudul = new javax.swing.JTextField();
        txtPengarang = new javax.swing.JTextField();
        txtPenerbit = new javax.swing.JTextField();
        btnBuku = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        txtKodePeminjaman = new javax.swing.JTextField();
        txtKodeAnggota = new javax.swing.JTextField();
        txtNama = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        btnAnggota = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPeminjaman = new javax.swing.JTable();
        btnSimpanData = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        cbxJumlah = new javax.swing.JComboBox<>();
        labelPengembalian = new javax.swing.JLabel();
        txtTglPengembalian = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        btnTambahBuku = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();

        dateChooser1.setForeground(new java.awt.Color(51, 51, 51));
        dateChooser1.setDateFormat("yyyy-MM-dd");
        dateChooser1.setEnabled(false);
        dateChooser1.setFocusable(false);
        dateChooser1.setTextRefernce(txtTglPengembalian);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Menu Peminjaman Buku");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(null);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 204, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setForeground(new java.awt.Color(255, 204, 0));

        tblDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kode Peminjaman", "Kode Buku", "Judul Buku", "Jumlah Pinjam", "Status Peminjaman"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDetail.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tblDetail);

        tblSementara.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kode Buku", "Judul Buku", "Pengarang", "Penerbit", "Jumlah Pinjam", "Status Pinjam"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSementara.getTableHeader().setReorderingAllowed(false);
        tblSementara.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSementaraMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblSementara);

        btnUbah.setText("Ubah Jumlah");
        btnUbah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUbahActionPerformed(evt);
            }
        });

        btnSimpan.setText("Simpan Jumlah");
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        jLabel7.setText("Total Pinjam : ");

        labelTotalPinjam.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        labelTotalPinjam.setText("0");

        btnBatalSementara.setText("Batal");
        btnBatalSementara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBatalSementaraActionPerformed(evt);
            }
        });

        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        btnPinjam.setText("Pinjam Buku");
        btnPinjam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPinjamActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSementaraLayout = new javax.swing.GroupLayout(panelSementara);
        panelSementara.setLayout(panelSementaraLayout);
        panelSementaraLayout.setHorizontalGroup(
            panelSementaraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSementaraLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(panelSementaraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(panelSementaraLayout.createSequentialGroup()
                        .addComponent(btnUbah)
                        .addGap(18, 18, 18)
                        .addComponent(btnSimpan)
                        .addGap(18, 18, 18)
                        .addComponent(btnHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBatalSementara, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnPinjam, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelTotalPinjam, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 97, Short.MAX_VALUE)))
                .addGap(21, 21, 21))
        );
        panelSementaraLayout.setVerticalGroup(
            panelSementaraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSementaraLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(panelSementaraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUbah, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSimpan, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(labelTotalPinjam)
                    .addComponent(btnBatalSementara, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPinjam, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Poppins", 1, 24)); // NOI18N
        jLabel1.setText("Peminjaman Buku");

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        txtSearch.setText("Search");
        txtSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtSearchMouseClicked(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });

        btnBaru.setText("Baru");
        btnBaru.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBaruActionPerformed(evt);
            }
        });

        jLabel2.setText("Kode Buku");

        jLabel3.setText("Judul Buku");

        jLabel4.setText("Pengarang");

        jLabel6.setText("Penerbit");

        txtKodeBuku.setEditable(false);

        txtJudul.setEditable(false);
        txtJudul.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtJudulKeyTyped(evt);
            }
        });

        txtPengarang.setEditable(false);
        txtPengarang.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPengarangKeyTyped(evt);
            }
        });

        txtPenerbit.setEditable(false);

        btnBuku.setText("Pilih Buku");
        btnBuku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBukuActionPerformed(evt);
            }
        });

        jLabel10.setText("Kode Peminjaman");

        txtKodePeminjaman.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtKodePeminjamanKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtKodePeminjamanKeyTyped(evt);
            }
        });

        txtKodeAnggota.setEditable(false);

        txtNama.setEditable(false);
        txtNama.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNamaKeyTyped(evt);
            }
        });

        jLabel14.setText("Kode Anggota");

        jLabel15.setText("Nama Anggota");

        btnAnggota.setText("Pilih Anggota");
        btnAnggota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnggotaActionPerformed(evt);
            }
        });

        jLabel16.setText("Jumlah Pinjam");

        tblPeminjaman.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kode Peminjaman", "Kode Anggota", "Nama Anggota", "Peminjaman", "Pengembalian", "Total Pinjam", "Petugas"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPeminjaman.getTableHeader().setReorderingAllowed(false);
        tblPeminjaman.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPeminjamanMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblPeminjaman);

        btnSimpanData.setText("Simpan Data");
        btnSimpanData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanDataActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        jLabel5.setText("Riwayat Peminjaman");

        cbxJumlah.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5" }));
        cbxJumlah.setSelectedIndex(-1);

        labelPengembalian.setText("Tanggal Pengembalian");

        jLabel11.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        jLabel11.setText("Detail Peminjaman");

        btnTambahBuku.setText("Tambah Buku");
        btnTambahBuku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahBukuActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel9.setText(" \"Tekan tombol Enter untuk melanjutkan.\"");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnBaru, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtPenerbit, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtNama, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(txtKodeBuku, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(btnBuku, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(txtJudul, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGap(40, 40, 40)
                                                        .addComponent(txtPengarang, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(40, 40, 40)
                                                    .addComponent(cbxJumlah, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(btnSimpanData)
                                                        .addComponent(btnTambahBuku))))
                                            .addGap(0, 0, Short.MAX_VALUE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(61, 61, 61)
                                        .addComponent(txtKodeAnggota, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnAnggota, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(32, 32, 32)
                                .addComponent(panelSementara, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1367, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(labelPengembalian)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtTglPengembalian, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                                            .addComponent(txtKodePeminjaman))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel9)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(28, 28, 28))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBaru, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtKodePeminjaman, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPengembalian)
                    .addComponent(txtTglPengembalian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(txtKodeAnggota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAnggota))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(txtNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtKodeBuku, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuku)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtJudul, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPengarang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPenerbit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addComponent(panelSementara, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbxJumlah, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel16))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSimpanData)
                            .addComponent(btnTambahBuku))
                        .addGap(1, 1, 1)))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        try {
            String jumlahDipilih = cbxJumlah.getSelectedItem().toString();
            String jumlahComboString = cbxJumlah.getSelectedItem().toString();
            int jumlahCombo;
            jumlahCombo = Integer.parseInt(jumlahComboString);
            
            int indeksYangAkanDiubah = -1;
            for (int i = 0; i < temporaryData.size(); i++) {
                String[] data = temporaryData.get(i);
                if (data[0].equals(txtKodeBuku.getText())) {
                    indeksYangAkanDiubah = i;
                    break;
                }
            }

            int stokBuku = getStokBukuFromDatabase(txtKodeBuku.getText());
            if (jumlahCombo > stokBuku) {
                JOptionPane.showMessageDialog(this, "Stok buku kurang", "Informasi", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            if (indeksYangAkanDiubah != -1) {
                temporaryData.get(indeksYangAkanDiubah)[4] = jumlahDipilih;
                JOptionPane.showMessageDialog(this, "Jumlah berhasil diubah", "Informasi", JOptionPane.INFORMATION_MESSAGE);
                tampilDataSementara();
                btnSimpan.setEnabled(false);
                btnBuku.setEnabled(true);
                btnPinjam.setEnabled(true);
                cbxJumlah.setEnabled(false);
                btnTambahBuku.setEnabled(true);
                btnPinjam.requestFocus();
                btnBuku.setEnabled(false);
                btnBatalSementara.setEnabled(false);
            } else {
                JOptionPane.showMessageDialog(this, "Buku tidak ditemukan dalam array sementara", "Informasi", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {

            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void txtSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtSearchMouseClicked
        txtSearch.setText("");
    }//GEN-LAST:event_txtSearchMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        temporaryData.clear();
        bersihData();
        btnHapus.setEnabled(false);
        btnBatalSementara.setEnabled(false);
        btnTambahBuku.setEnabled(false);
        cbxJumlah.setEnabled(false);
        cbxJumlah.setSelectedIndex(-1);
        btnBuku.setEnabled(false);
        txtKodePeminjaman.setEnabled(false);
        btnAnggota.setEnabled(false);
        txtKodeBuku.setEnabled(false);
        txtJudul.setEnabled(false);
        txtPengarang.setEnabled(false);
        txtPengarang.setEnabled(false);
        txtPenerbit.setEnabled(false);
        txtKodeAnggota.setEnabled(false);
        txtNama.setEnabled(false);
        btnBaru.setEnabled(true);
        btnBaru.requestFocus();
        btnReset.setEnabled(false);
        btnPinjam.setEnabled(false);
        btnSimpanData.setEnabled(false);
        btnUbah.setEnabled(false);
        btnSimpan.setEnabled(false);
        txtTglPengembalian.setEnabled(false);
    }//GEN-LAST:event_formWindowOpened

    private void btnBaruActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBaruActionPerformed
        bersihData();
        txtKodePeminjaman.setEnabled(true);
        txtKodePeminjaman.requestFocus();
        txtJudul.setEnabled(false);
        txtPengarang.setEnabled(false);
        btnSimpan.setEnabled(false);
        btnBaru.setEnabled(false);
        btnReset.setEnabled(true);
        txtPenerbit.setEnabled(false);
        btnBuku.setEnabled(false);
    }//GEN-LAST:event_btnBaruActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        temporaryData.clear();
        resetForm();
    }//GEN-LAST:event_btnResetActionPerformed

    private void txtJudulKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtJudulKeyTyped
        if (txtJudul.getText().length() >= 100) {
            evt.consume();
        }
    }//GEN-LAST:event_txtJudulKeyTyped


    private void txtPengarangKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPengarangKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isLetter(c) || c == KeyEvent.VK_SPACE)) {
            evt.consume();
        }
        if (txtPengarang.getText().length() >= 45) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPengarangKeyTyped

    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped
        String keyword = txtSearch.getText();

        DefaultTableModel model2 = (DefaultTableModel) tblPeminjaman.getModel();
        model2.setRowCount(0);
        try {
            String sql = "SELECT p.kode_peminjaman, p.tgl_peminjaman, p.tgl_pengembalian, p.total_pinjam, a.nama_anggota, p.kode_anggota, u.nama_lengkap "
                    + "FROM peminjaman p "
                    + "INNER JOIN anggota a ON a.kode_anggota = p.kode_anggota "
                    + "INNER JOIN user u on u.kode_user = p.kode_user "
                    + "WHERE p.kode_peminjaman LIKE ? OR p.kode_anggota LIKE ? OR a.nama_anggota LIKE ? "
                    + "OR p.tgl_peminjaman LIKE ? OR p.tgl_pengembalian LIKE ? OR u.nama_lengkap LIKE ? OR p.total_pinjam LIKE ? ";
            try (PreparedStatement st = koneksi.prepareStatement(sql)) {
                st.setString(1, "%" + keyword + "%");
                st.setString(2, "%" + keyword + "%");
                st.setString(3, "%" + keyword + "%");
                st.setString(4, "%" + keyword + "%");
                st.setString(5, "%" + keyword + "%");
                st.setString(6, "%" + keyword + "%");
                st.setString(7, "%" + keyword + "%");
                ResultSet rs = st.executeQuery();
                while (rs.next()) {
                    model2.addRow(new Object[]{
                        rs.getString("kode_peminjaman"),
                        rs.getString("kode_anggota"),
                        rs.getString("nama_anggota"),
                        rs.getString("tgl_peminjaman"),
                        rs.getString("tgl_pengembalian"),
                        rs.getString("total_pinjam"),
                        rs.getString("nama_lengkap")
                    });
                }

            } catch (SQLException e) {
                e.printStackTrace();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtSearchKeyTyped

    private void btnBukuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBukuActionPerformed
        // TODO add your handling code here:
        dialogBuku.setVisible(true);
        dialogBuku.tampilData();
        txtKodeBuku.setText(dialogBuku.getKodeBuku());
        txtJudul.setText(dialogBuku.getJudulBuku());
        txtPengarang.setText(dialogBuku.getPengarang());
        txtPenerbit.setText(dialogBuku.getPenerbit());
    }//GEN-LAST:event_btnBukuActionPerformed

    private void txtNamaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNamaKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isLetter(c) || c == KeyEvent.VK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNamaKeyTyped

    private void txtKodePeminjamanKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtKodePeminjamanKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (txtKodePeminjaman.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Silahkan isi Kode peminjaman terlebih dahulu!", "Informasi", JOptionPane.INFORMATION_MESSAGE);
                txtKodePeminjaman.requestFocus();
                return;
            }
            dataDitemukan = cariData(txtKodePeminjaman.getText());
            if (dataDitemukan == true) {
                JOptionPane.showMessageDialog(this, "Kode Peminjaman sudah ada silahkan isi Kode peminjaman yang berbeda!", "Informasi", JOptionPane.INFORMATION_MESSAGE);
                return;
            } else {
                txtTglPengembalian.setEnabled(true);
                cbxJumlah.setEnabled(true);
                btnSimpanData.setEnabled(true);
                txtKodePeminjaman.setEnabled(false);
                txtTglPengembalian.requestFocus();
                btnReset.setEnabled(true);
                btnBuku.setEnabled(true);
                btnAnggota.setEnabled(true);
            }
        }
    }//GEN-LAST:event_txtKodePeminjamanKeyReleased

    private void txtKodePeminjamanKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtKodePeminjamanKeyTyped
        // TODO add your handling code here:
        if (txtKodePeminjaman.getText().length() >= 10) {
            evt.consume();
        }
    }//GEN-LAST:event_txtKodePeminjamanKeyTyped

    private void btnAnggotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnggotaActionPerformed
        // TODO add your handling code here:
        dialogAnggota.setVisible(true);
        dialogAnggota.tampilData();
        txtKodeAnggota.setText(dialogAnggota.getKodeAnggota());
        txtNama.setText(dialogAnggota.getNama());
    }//GEN-LAST:event_btnAnggotaActionPerformed

    private void btnSimpanDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanDataActionPerformed

        if (txtTglPengembalian.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Silahkan pilih tanggal pengembalian!", "Informasi", JOptionPane.INFORMATION_MESSAGE);
            txtTglPengembalian.requestFocus();
            return;
        }

        if (txtKodeAnggota.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Silahkan pilih data anggota!", "Informasi", JOptionPane.INFORMATION_MESSAGE);
            btnAnggota.requestFocus();
            return;
        }

        if (txtKodeBuku.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Silahkan lengkapi data buku!", "Informasi", JOptionPane.INFORMATION_MESSAGE);
            btnBuku.requestFocus();
            return;
        }

        int jumlahBukuDipinjam = cekTotalBukuDipinjam(txtKodeAnggota.getText());

        SimpleDateFormat formatTgl = new SimpleDateFormat("yyyy-MM-dd");
        try {
            Date tglDipilih = formatTgl.parse(txtTglPengembalian.getText());
            Date tglSekarang = new Date();
            tglSekarang = formatTgl.parse(formatTgl.format(tglSekarang));

            if (tglDipilih.before(tglSekarang)) {
                JOptionPane.showMessageDialog(this, "Tanggal pengembalian tidak boleh mundur kebelakang!", "Informasi", JOptionPane.INFORMATION_MESSAGE);
                txtTglPengembalian.requestFocus();
                return;
            }
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Format tanggal pengembalian tidak valid!", "Informasi", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        if (cbxJumlah.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Silahkan pilih jumlah pinjam!", "Informasi", JOptionPane.INFORMATION_MESSAGE);
            cbxJumlah.requestFocus();
            return;
        }

        String jumlahComboString = cbxJumlah.getSelectedItem().toString();
        int jumlahCombo;
        jumlahCombo = Integer.parseInt(jumlahComboString);

        int stok = dialogBuku.getStokBuku();
        if (jumlahCombo > stok) {
            JOptionPane.showMessageDialog(this, "Stok buku kurang", "Informasi", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        if (jumlahBukuDipinjam >= 5) {
            JOptionPane.showMessageDialog(this, "Anggota ini sudah meminjam maksimal 5 buku. Harap mengembalikan buku terlebih dahulu.", "Informasi", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        insertArray();
        tampilDataSementara();
        panelSementara.setVisible(true);

        int pilihan = JOptionPane.showConfirmDialog(this, "Apakah anda ingin menambah buku ?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
        if (pilihan == JOptionPane.YES_OPTION) {
            btnTambahBuku.setVisible(true);
            btnSimpanData.setVisible(false);
            txtTglPengembalian.setVisible(false);
            labelPengembalian.setVisible(false);
            btnTambahBuku.setEnabled(true);
            btnAnggota.setEnabled(false);
            btnBuku.setEnabled(true);
            btnBatalSementara.setEnabled(false);
            btnUbah.setEnabled(false);
            btnSimpan.setEnabled(false);
            btnPinjam.setEnabled(true);
            btnBuku.requestFocus();
        } else {
            btnSimpanData.setEnabled(false);
            btnPinjam.setEnabled(true);
            btnPinjam.requestFocus();
            labelPengembalian.setVisible(false);
            txtTglPengembalian.setVisible(false);
            labelPengembalian.setVisible(false);
            btnAnggota.setEnabled(false);
            btnBuku.setEnabled(false);
            cbxJumlah.setEnabled(false);
        }

    }//GEN-LAST:event_btnSimpanDataActionPerformed

    private void btnUbahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUbahActionPerformed
        // TODO add your handling code here:
        if (tblSementara.getSelectedRow() >= 0) {
            txtKodeBuku.setText(model1.getValueAt(tblSementara.getSelectedRow(), 0).toString());
            txtJudul.setText(model1.getValueAt(tblSementara.getSelectedRow(), 1).toString());
            txtPengarang.setText(model1.getValueAt(tblSementara.getSelectedRow(), 2).toString());
            txtPenerbit.setText(model1.getValueAt(tblSementara.getSelectedRow(), 3).toString());
            cbxJumlah.setSelectedItem(model1.getValueAt(tblSementara.getSelectedRow(), 4).toString());
            btnAnggota.setEnabled(false);
            btnBaru.setEnabled(false);
            btnHapus.setEnabled(false);
            btnSimpan.setEnabled(false);
            btnUbah.setEnabled(true);
            btnUbah.requestFocus();
            btnReset.setEnabled(false);
            btnPinjam.setEnabled(false);
            btnBatalSementara.setEnabled(true);
            btnBuku.setEnabled(false);
            cbxJumlah.setEnabled(true);
            cbxJumlah.requestFocus();
            btnTambahBuku.setVisible(false);
        }

        btnUbah.setEnabled(false);
        btnSimpanData.setEnabled(false);
        btnSimpan.setEnabled(true);
        btnBatalSementara.setEnabled(true);

    }//GEN-LAST:event_btnUbahActionPerformed

    private void btnPinjamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPinjamActionPerformed

        int jumlahBukuDipinjam = cekTotalBukuDipinjam(txtKodeAnggota.getText());

        int jumlahPinjamSementara = getJumlahPinjam();
        int totalJumlahBukuDipinjam = jumlahBukuDipinjam + jumlahPinjamSementara;
        if (totalJumlahBukuDipinjam > 5) {
            String listBukuDipinjam = getListBukuDipinjam(txtKodeAnggota.getText());
            JOptionPane.showMessageDialog(this, "Hanya 5 buku yang dapat dipinjam.\n"
                    + " Buku yang sedang dipinjam :\n" + listBukuDipinjam,
                    "Informasi", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        int pilihan;
        pilihan = JOptionPane.showConfirmDialog(this, "Data tidak dapat diubah jika anda sudah meminjam buku \n Apakah anda yakin akan meminjam buku?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
        if (pilihan == 0) {
            try {

                LocalDate tglPeminjaman = LocalDate.now();
                DateTimeFormatter formatTgl = DateTimeFormatter.ofPattern("yyyy-MM-dd");
                String tglPeminjamanTerformat = tglPeminjaman.format(formatTgl);

                perintah.execute("INSERT INTO peminjaman VALUES('"
                        + txtKodePeminjaman.getText() + "','"
                        + txtKodeAnggota.getText() + "','"
                        + tglPeminjamanTerformat + "','"
                        + txtTglPengembalian.getText() + "','"
                        + labelTotalPinjam.getText() + "','"
                        + kodeUser + "')"
                );

                for (String[] data : temporaryData) {
                    String kodePeminjaman = txtKodePeminjaman.getText();
                    String kodeBuku = data[0]; // kode buku dari array
                    String jumlahPinjam = data[4]; // jumlah pinjam dari array
                    String statusPeminjaman = data[5]; // tatus pinjam dari array

                    try {
                        perintah.execute("INSERT INTO detail_peminjaman (kode_peminjaman, kode_buku, jumlah_pinjam, status_peminjaman) "
                                + "VALUES ('" + kodePeminjaman + "', '" + kodeBuku + "', '" + jumlahPinjam + "', '" + statusPeminjaman + "')");
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }

                JOptionPane.showMessageDialog(this, "Buku berhasil dipinjam", "Informasi", JOptionPane.INFORMATION_MESSAGE);
                temporaryData.clear();
                dialogBuku.tampilData();
                tampilDataPeminjaman();
                tampilDataSementara();
                bersihData();
                btnReset.setEnabled(true);
                btnReset.requestFocus();
                btnBuku.setEnabled(false);
                resetForm();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Data gagal ditambahkan", "Informasi", JOptionPane.INFORMATION_MESSAGE);
                e.printStackTrace();
            }

        }

    }//GEN-LAST:event_btnPinjamActionPerformed

    private void tblSementaraMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSementaraMouseClicked
        int hitungBaris = tblSementara.getRowCount();
        btnUbah.setEnabled(true);
        btnBatalSementara.setEnabled(true);
        if (hitungBaris == 1) {
            btnHapus.setEnabled(false);
        } else {
            btnHapus.setEnabled(true);
        }
    }//GEN-LAST:event_tblSementaraMouseClicked

    private void btnBatalSementaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBatalSementaraActionPerformed
        // TODO add your handling code here:
        clearBuku();
        tampilDataSementara();
        btnSimpan.setEnabled(false);
        btnReset.setEnabled(true);
        btnBatalSementara.setEnabled(false);
        btnBuku.setEnabled(false);
        cbxJumlah.setEnabled(false);
        btnPinjam.setEnabled(true);
        btnUbah.setEnabled(false);
    }//GEN-LAST:event_btnBatalSementaraActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        // TODO add your handling code here:
        String kodeBuku = model1.getValueAt(tblSementara.getSelectedRow(), 0).toString();

        if ((tblSementara.getSelectedRow() == -1) && (dataDitemukan == false)) {
            JOptionPane.showMessageDialog(this, "Silahkan pilih baris data yang akan dihapus!",
                    "Informasi", JOptionPane.INFORMATION_MESSAGE);
        } else {
            int pilihan;
            pilihan = JOptionPane.showConfirmDialog(this, "Apakah anda yakin akan menghapus data?",
                    "Konfirmasi", JOptionPane.YES_NO_OPTION);
            if (pilihan == 0) {
                // Mencari indeks buku dalam array temporaryData
                int indeksYangAkanDihapus = -1;
                for (int i = 0; i < temporaryData.size(); i++) {
                    String[] data = temporaryData.get(i);
                    if (data[0].equals(kodeBuku)) {
                        indeksYangAkanDihapus = i;
                        break;
                    }
                }

                // Menghapus data dari array jika buku ditemukan
                if (indeksYangAkanDihapus != -1) {
                    temporaryData.remove(indeksYangAkanDihapus);
                    JOptionPane.showMessageDialog(this, "Data berhasil dihapus", "Informasi", JOptionPane.INFORMATION_MESSAGE);
                    int jumlahPinjam = getJumlahPinjam();
                    labelTotalPinjam.setText(String.valueOf(jumlahPinjam));
                    tampilDataSementara();
                } else {
                    JOptionPane.showMessageDialog(this, "Buku tidak ditemukan dalam array sementara", "Informasi", JOptionPane.INFORMATION_MESSAGE);
                }

                clearBuku();
                btnSimpan.setEnabled(false);
                btnUbah.setEnabled(false);
                btnHapus.setEnabled(false);
            }
        }
    }//GEN-LAST:event_btnHapusActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        temporaryData.clear();
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        temporaryData.clear();
    }//GEN-LAST:event_formWindowClosing

    private void tblPeminjamanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPeminjamanMouseClicked
        // TODO add your handling code here:
        int row = tblPeminjaman.getSelectedRow();
        String kodePeminjaman = tblPeminjaman.getValueAt(row, 0).toString();
        try {
            rs = perintah.executeQuery(
                    "SELECT dp.kode_peminjaman, b.kode_buku, b.judul_buku, dp.jumlah_pinjam, dp.status_peminjaman "
                    + "FROM detail_peminjaman dp "
                    + "INNER JOIN buku b ON b.kode_buku = dp.kode_buku "
                    + "WHERE dp.kode_peminjaman = '" + kodePeminjaman + "'"
                    + "ORDER BY dp.kode_peminjaman ASC"
            );
            model3.setRowCount(0);
            model3.fireTableDataChanged();
            while (rs.next()) {
                model3.addRow(new Object[]{
                    rs.getString("kode_peminjaman"),
                    rs.getString("kode_buku"),
                    rs.getString("judul_buku"),
                    rs.getString("jumlah_pinjam"),
                    rs.getString("status_peminjaman")
                });
            }
        } catch (SQLException e) {

            System.err.println("Query Error");
            e.printStackTrace();
        }
    }//GEN-LAST:event_tblPeminjamanMouseClicked

    private void btnTambahBukuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahBukuActionPerformed
        // TODO add your handling code here:
        if (txtKodeBuku.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Silahkan lengkapi data buku!",
                    "Informasi", JOptionPane.INFORMATION_MESSAGE);
            txtKodeBuku.requestFocus();
            return;
        }
        if (cbxJumlah.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Silahkan pilih jumlah pinjam!",
                    "Informasi", JOptionPane.INFORMATION_MESSAGE);
            cbxJumlah.requestFocus();
            return;
        }
        String jumlahComboString = cbxJumlah.getSelectedItem().toString();
        int totalPinjamComboBox = Integer.parseInt(cbxJumlah.getSelectedItem().toString());
        int totalPinjam = Integer.parseInt(labelTotalPinjam.getText());

        int jumlahBukuDipinjam = cekTotalBukuDipinjam(txtKodeAnggota.getText());

        int jumlahCombo = Integer.parseInt(jumlahComboString);
        int stok = dialogBuku.getStokBuku();

        if (jumlahCombo > stok) {
            JOptionPane.showMessageDialog(this, "Stok buku kurang",
                    "Informasi", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        if (jumlahBukuDipinjam >= 5) {
            String listBukuDipinjam = getListBukuDipinjam(txtKodeAnggota.getText());
            JOptionPane.showMessageDialog(this, "Hanya 5 buku yang dapat dipinjam.\n"
                    + " Buku yang telah dipinjam :\n" + listBukuDipinjam,
                    "Informasi", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        if (totalPinjam + totalPinjamComboBox > 5) {
            JOptionPane.showMessageDialog(this, "Anggota sudah mencapai maksimal peminjaman", "Informasi", JOptionPane.INFORMATION_MESSAGE);
        } else {
            if (bukuSudahDitambahkan(txtKodeBuku.getText())) {
                JOptionPane.showMessageDialog(this, "Buku tersebut sudah ditambahkan sebelumnya", "Informasi", JOptionPane.INFORMATION_MESSAGE);
            } else {
                insertArray();
                int pilihan = JOptionPane.showConfirmDialog(this, "Apakah anda ingin menambah buku lagi ?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
                if (pilihan == JOptionPane.YES_OPTION) {
                    btnTambahBuku.setVisible(true);
                    btnSimpanData.setVisible(false);
                    txtTglPengembalian.setVisible(false);
                    labelPengembalian.setVisible(false);
                    btnTambahBuku.setEnabled(true);
                    btnAnggota.setEnabled(false);
                    btnBuku.setEnabled(true);
                    btnBatalSementara.setEnabled(false);
                    btnUbah.setEnabled(false);
                    btnSimpan.setEnabled(false);
                    btnPinjam.setEnabled(true);
                    btnBuku.requestFocus();
                } else {
                    btnSimpanData.setEnabled(false);
                    btnPinjam.setEnabled(true);
                    btnPinjam.requestFocus();
                    labelPengembalian.setVisible(false);
                    txtTglPengembalian.setVisible(false);
                    labelPengembalian.setVisible(false);
                    btnAnggota.setEnabled(false);
                    btnBuku.setEnabled(false);
                    cbxJumlah.setEnabled(false);
                    btnTambahBuku.setEnabled(false);
                }

            }
        }
    }//GEN-LAST:event_btnTambahBukuActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnggota;
    private javax.swing.JButton btnBaru;
    private javax.swing.JButton btnBatalSementara;
    private javax.swing.JButton btnBuku;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnPinjam;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JButton btnSimpanData;
    private javax.swing.JButton btnTambahBuku;
    private javax.swing.JButton btnUbah;
    private javax.swing.JComboBox<String> cbxJumlah;
    private com.raven.datechooser.DateChooser dateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelPengembalian;
    private javax.swing.JLabel labelTotalPinjam;
    private javax.swing.JPanel panelSementara;
    private javax.swing.JTable tblDetail;
    private javax.swing.JTable tblPeminjaman;
    private javax.swing.JTable tblSementara;
    private javax.swing.JTextField txtJudul;
    private javax.swing.JTextField txtKodeAnggota;
    private javax.swing.JTextField txtKodeBuku;
    private javax.swing.JTextField txtKodePeminjaman;
    private javax.swing.JTextField txtNama;
    private javax.swing.JTextField txtPenerbit;
    private javax.swing.JTextField txtPengarang;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTglPengembalian;
    // End of variables declaration//GEN-END:variables

    private void bersihData() {
        txtKodeAnggota.setText("");
        txtNama.setText("");
        txtKodePeminjaman.setText("");
        txtKodeBuku.setText("");
        txtJudul.setText("");
        txtPengarang.setText("");
        txtPenerbit.setText("");
        cbxJumlah.setSelectedIndex(-1);
        txtTglPengembalian.setText("");
    }

    private void tampilDataSementara() {
        int jumlahPinjam = getJumlahPinjam();
        labelTotalPinjam.setText(String.valueOf(jumlahPinjam));

        model1.setRowCount(0);
        model1.fireTableDataChanged();

        for (String[] data : temporaryData) {
            model1.addRow(data);
        }
    }

    private void tampilDataPeminjaman() {
        try {
            rs = perintah.executeQuery(
                    "SELECT p.kode_peminjaman, p.kode_anggota, a.nama_anggota, p.tgl_peminjaman, p.tgl_pengembalian, p.total_pinjam, u.nama_lengkap "
                    + "FROM peminjaman p "
                    + "INNER JOIN anggota a ON a.kode_anggota = p.kode_anggota "
                    + "INNER JOIN user u on u.kode_user =  p.kode_user ORDER BY p.kode_peminjaman ASC"
            );
            model2.setRowCount(0);
            model2.fireTableDataChanged();
            while (rs.next()) {
                model2.addRow(new Object[]{
                    rs.getString("kode_peminjaman"),
                    rs.getString("kode_anggota"),
                    rs.getString("nama_anggota"),
                    rs.getString("tgl_peminjaman"),
                    rs.getString("tgl_pengembalian"),
                    rs.getString("total_pinjam"),
                    rs.getString("nama_lengkap")
                });
            }
        } catch (SQLException e) {

            System.err.println("Query Error");
            e.printStackTrace();
        }
    }

    private boolean cariData(String data) {
        if (!txtKodePeminjaman.getText().equals("")) {
            try {
                rs = perintah.executeQuery("SELECT * FROM peminjaman "
                        + "WHERE kode_peminjaman = '" + data + "'");

                if (rs.next()) {
                    return true;
                } else {
                    return false;
                }
            } catch (SQLException e) {

                System.err.println("Query Error");
                e.printStackTrace();
            }
        }
        return false;
    }

    private int getJumlahPinjam() {
        int totalPinjam = 0;

        for (String[] data : temporaryData) {
            try {
                int jumlahPinjam = Integer.parseInt(data[4]);
                totalPinjam += jumlahPinjam;
            } catch (NumberFormatException e) {
                e.printStackTrace();
            }
        }

        return totalPinjam;
    }

    private void clearBuku() {
        txtKodeBuku.setText("");
        txtJudul.setText("");
        txtPengarang.setText("");
        txtPenerbit.setText("");
        cbxJumlah.setSelectedIndex(-1);

    }

    private void insertArray() {
        try {
            String[] data = {
                txtKodeBuku.getText(),
                txtJudul.getText(),
                txtPengarang.getText(),
                txtPenerbit.getText(),
                cbxJumlah.getSelectedItem().toString(),
                "Sedang Dipinjam"
            };

            temporaryData.add(data);

            tampilDataSementara();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Data gagal ditambahkan", "Informasi", JOptionPane.INFORMATION_MESSAGE);
            e.printStackTrace();
        }
    }

    private int cekTotalBukuDipinjam(String kodeAnggota) {
        String query = "SELECT SUM(dp.jumlah_pinjam) "
                + "FROM peminjaman p "
                + "INNER JOIN detail_peminjaman dp ON p.kode_peminjaman = dp.kode_peminjaman "
                + "WHERE p.kode_anggota = ? AND dp.status_peminjaman = 'Sedang Dipinjam'";
        try (PreparedStatement ps = koneksi.prepareStatement(query)) {
            ps.setString(1, kodeAnggota);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1);
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return 0;
    }

    private void resetForm() {
        bersihData();
        btnSimpanData.setVisible(true);
        btnTambahBuku.setVisible(false);
        labelPengembalian.setVisible(true);
        txtTglPengembalian.setVisible(true);
        txtKodePeminjaman.setEnabled(false);
        txtJudul.setEnabled(false);
        txtPengarang.setEnabled(false);
        btnBaru.requestFocus();
        btnBaru.setEnabled(true);
        btnSimpan.setEnabled(false);
        btnReset.setEnabled(false);
        txtPenerbit.setEnabled(false);
        btnBuku.setEnabled(false);
        btnAnggota.setEnabled(false);
        cbxJumlah.setEnabled(false);
        cbxJumlah.setSelectedIndex(-1);
        btnSimpanData.setEnabled(false);
        txtTglPengembalian.setVisible(true);
        btnPinjam.setEnabled(false);
        btnUbah.setEnabled(false);
        tampilDataSementara();
    }

    private String getListBukuDipinjam(String kodeAnggota) {
        String listBukuDipinjam = "";
        String query = "SELECT b.judul_buku, dp.jumlah_pinjam "
                + "FROM peminjaman p "
                + "INNER JOIN detail_peminjaman dp ON p.kode_peminjaman = dp.kode_peminjaman "
                + "INNER JOIN buku b ON dp.kode_buku = b.kode_buku "
                + "WHERE p.kode_anggota = ? AND dp.status_peminjaman = 'Sedang Dipinjam'";
        try (PreparedStatement ps = koneksi.prepareStatement(query)) {
            ps.setString(1, kodeAnggota);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    String judul = rs.getString("judul_buku");
                    int jumlahPinjam = rs.getInt("jumlah_pinjam");
                    listBukuDipinjam += "- " + judul + " (" + jumlahPinjam + " buku)\n";
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return listBukuDipinjam;
    }

    private boolean bukuSudahDitambahkan(String kodeBuku) {
        for (String[] data : temporaryData) {
            if (data[0].equals(kodeBuku)) {
                return true;
            }
        }
        return false;
    }

    private int getStokBukuFromDatabase(String kodeBuku) {
        try {
            String query = "SELECT stok FROM buku WHERE kode_buku = ?";
            PreparedStatement statement = koneksi.prepareStatement(query);
            statement.setString(1, kodeBuku);
            ResultSet rs = statement.executeQuery();
            if (rs.next()) {
                return rs.getInt("stok");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return -1;
    }

}
